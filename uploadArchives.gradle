// uploadArchives.gradle
// identical maven repository upload stuff used in all sub-projects via 
// apply from: '../uploadArchives.gradle'

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    description = "Builds -${classifier} archive containing api-doc."
    from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	description = "Builds -${classifier} archive containing source code."

	from('src') {
		include '**'
	}
 
}

artifacts {
    archives javadocJar, sourcesJar
}

if (hasProperty("signing.keyId")) {
	signing {
		logger.info "signing archives using ${signing.keyId}\n"
		sign configurations.archives
	}
}

uploadArchives {

	dependsOn assemble
	repositories {
		mavenDeployer {

			if (hasProperty("signing.keyId")) {
				beforeDeployment { 
					MavenDeployment deployment -> signing.signPom(deployment) 
				}
			}

			repository(url: mavenUpload_serverUrl) {
				logger.info "configured mavenUpload_serverUrl '${mavenUpload_archivesBaseName}' to repository '${mavenUpload_serverUrl}'"
				if (parent.hasProperty("mavenUpload_login") && parent.hasProperty("mavenUpload_password")) {
					logger.info " using login='${mavenUpload_login}'"
					authentication(userName: mavenUpload_login, password: mavenUpload_password)
				}
				logger.info "\n"
			}
	
			ext.mavenUpload_packagingType = (mavenUpload_archivesBaseName.toLowerCase().contains('andro')) ? 'aar' : 'jar'
			pom.project {
				name "${mavenUpload_archivesBaseName}"
				packaging "${mavenUpload_packagingType}"
				description "${mavenUpload_description}"
				url "https://github.com/${github_userId}/${github_repository}"

				scm {
					url 				"http://www.github.com/${github_userId}/${github_repository}"
					connection 			"scm:git://github.com/${github_userId}/${github_repository}.git"
					developerConnection	"scm:git://github.com/${github_userId}/${github_repository}.git"
				}

				licenses {
					license {
						name "${project_licence_name}"
						url "https://raw.github.com/${github_userId}/${github_repository}/master/LICENSE"
						distribution 'repo'
					}
				}

				if (parent.hasProperty("mavenUpload_publisher_name") && parent.hasProperty("mavenUpload_publisher_email")) {
					developers {
						developer {
							id "${github_userId}"
							name "${mavenUpload_publisher_name}"
							email "${mavenUpload_publisher_email}"
						}
					}
				}
			}
		}
	}

}
